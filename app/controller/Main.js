/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Main', {
    extend: 'Ext.app.Controller',

    id: 'Main',

    refs: [
        {
            ref: 'MainView',
            selector: '#MainView'
        },
        {
            ref: 'myPanel',
            selector: '#myPanel'
        },
        {
            ref: 'mainViewport',
            selector: '#myviewport'
        },
        {
            ref: 'mainViewport2',
            selector: '#myviewport'
        },
        {
            ref: 'mytreepanel',
            selector: '#mytreepanel'
        },
        {
            ref: 'version',
            selector: '#version'
        }
    ],

    onAufnrKeypress: function(textfield, e, eOpts) {
        var me = this;
        if (e.getCharCode() === e.ENTER) {
            // enter pressed
            me.loadTaskStore(textfield.value);
        }
    },

    onAufnrChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        if (field.searchGo) {
            field.searchGo = false;
            me.loadTaskStore(newValue);
        }
    },

    onButtonClick1: function(button, e, eOpts) {
        var me = this;
        debugger;
        var myPanel = Ext.widget('mypanel');
        var mainView = Ext.widget('mainview');
        var taskStore = Ext.store('taskstore');
        mainView.setLoading(true);
        taskStore.sync({
            callback: function() {
                mainView.removeAll();
                mainView.insert(0,myPanel);
                mainView.setLoading(false);
            }
        });

    },

    onEventTriggerGanttConfig: function(component, config, eventOptions) {
        var me = this;
        var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
        var yesNoStore  = Ext.getStore('YesNoStore');
        var selectedRecord;
        var ganttExists = yesNoStore.findExact('name','ganttExists');
        var mainView = Ext.widget('mainview');
        var panelWidth = mainView.getWidth();
        var panelHeight = mainView.getHeight();
        var panelThird = panelWidth/3;
        //finishDate
        var finishRecordIndex = ganttConfigStore.findExact('name','finish');
        var finishRecord = ganttConfigStore.getAt(finishRecordIndex);
        var finishValue = finishRecord.get('value');
        //startDate
        startRecordIndex = ganttConfigStore.findExact('name','start');
        var startRecord = ganttConfigStore.getAt(startRecordIndex);
        var startValue = startRecord.get('value');
        //columnVariant
        columnVariantSelectedRecord = ganttConfigStore.findExact('name','columnVariant');
        var columnVariantRecord = ganttConfigStore.getAt(columnVariantSelectedRecord);
        var columnVariantValue = columnVariantRecord.get('value');
        //selectionVariant
        selectionVariantSelectedRecord = ganttConfigStore.findExact('name','selectionVariant');
        var selectionVariantRecord = ganttConfigStore.getAt(selectionVariantSelectedRecord);
        var selectionVariantValue = selectionVariantRecord.get('value');
        //version
        versionSelectedRecord = ganttConfigStore.findExact('name','version');
        var versionRecord = ganttConfigStore.getAt(versionSelectedRecord);
        var versionValue = versionRecord.get('value');
        try {
            //text01
            text01SelectedRecord = ganttConfigStore.findExact('name','text01');
            var text01Record = ganttConfigStore.getAt(text01SelectedRecord);
            var text01Value = text01Record.get('value');
            switch (text01Value) {
                case 'Not Used':
                    var text01Hide = true;
                    break;
                case 'Icon FA':
                    var text01columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text01columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text01columnType = 'templatecolumn';
                    break;
                default :
                    var text01columnType = 'gridcolumn';
                    break;
            }
            //text02
            text02SelectedRecord = ganttConfigStore.findExact('name','text02');
            var text02Record = ganttConfigStore.getAt(text02SelectedRecord);
            var text02Value = text02Record.get('value');
            switch (text02Value) {
                case 'Not Used':
                    var text02Hide = true;
                    break;
                case 'Icon FA':
                    var text02columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text02columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text02columnType = 'templatecolumn';
                    break;
                default :
                    var text02columnType = 'gridcolumn';
                    break;
            }
            //text03
            text03SelectedRecord = ganttConfigStore.findExact('name','text03');
            var text03Record = ganttConfigStore.getAt(text03SelectedRecord);
            var text03Value = text03Record.get('value');
            switch (text03Value) {
                case 'Not Used':
                    var text03Hide = true;
                    break;
                case 'Icon FA':
                    var text03columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text03columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text03columnType = 'templatecolumn';
                    break;
                default :
                    var text03columnType = 'gridcolumn';
                    break;
            }
            //text04
            text04SelectedRecord = ganttConfigStore.findExact('name','text04');
            var text04Record = ganttConfigStore.getAt(text04SelectedRecord);
            var text04Value = text04Record.get('value');
            switch (text04Value) {
                case 'Not Used':
                    var text04Hide = true;
                    break;
                case 'Icon FA':
                    var text04columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text04olumnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text04columnType = 'templatecolumn';
                    break;
                default :
                    var text04columnType = 'gridcolumn';
                    break;
            }
            //text05
            text05SelectedRecord = ganttConfigStore.findExact('name','text05');
            var text05Record = ganttConfigStore.getAt(text05SelectedRecord);
            var text05Value = text05Record.get('value');
            switch (text05Value) {
                case 'Not Used':
                    var text05Hide = true;
                    break;
                case 'Icon FA':
                    var text05columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text05columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text05columnType = 'templatecolumn';
                    break;
                default :
                    var text05columnType = 'gridcolumn';
                    break;
            }
            //text06
            text06SelectedRecord = ganttConfigStore.findExact('name','text06');
            var text06Record = ganttConfigStore.getAt(text06SelectedRecord);
            var text06Value = text06Record.get('value');
            switch (text06Value) {
                case 'Not Used':
                    var text06Hide = true;
                    break;
                case 'Icon FA':
                    var text06columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text06columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text06columnType = 'templatecolumn';
                    break;
                default :
                    var text06columnType = 'gridcolumn';
                    break;
            }
            //text07
            text07SelectedRecord = ganttConfigStore.findExact('name','text07');
            var text07Record = ganttConfigStore.getAt(text07SelectedRecord);
            var text07Value = text07Record.get('value');
            switch (text07Value) {
                case 'Not Used':
                    var text07Hide = true;
                    break;
                case 'Icon FA':
                    var text07columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text07columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text07columnType = 'templatecolumn';
                    break;
                default :
                    var text07columnType = 'gridcolumn';
                    break;
            }
            //text08
            text08SelectedRecord = ganttConfigStore.findExact('name','text08');
            var text08Record = ganttConfigStore.getAt(text08SelectedRecord);
            var text08Value = text08Record.get('value');
            switch (text08Value) {
                case 'Not Used':
                    var text08Hide = true;
                    break;
                case 'Icon FA':
                    var text08columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text08columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text08columnType = 'templatecolumn';
                    break;
                default :
                    var text08columnType = 'gridcolumn';
                    break;
            }
            //text09
            text09SelectedRecord = ganttConfigStore.findExact('name','text09');
            var text09Record = ganttConfigStore.getAt(text09SelectedRecord);
            var text09Value = text09Record.get('value');
            switch (text09Value) {
                case 'Not Used':
                    var text09Hide = true;
                    break;
                case 'Icon FA':
                    var text09columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text09columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text09columnType = 'templatecolumn';
                    break;
                default :
                    var text09columnType = 'gridcolumn';
                    break;
            }
            //text10
            text10SelectedRecord = ganttConfigStore.findExact('name','text10');
            var text10Record = ganttConfigStore.getAt(text10SelectedRecord);
            var text10Value = text10Record.get('value');
            switch (text10Value) {
                case 'Not Used':
                    var text10Hide = true;
                    break;
                case 'Icon FA':
                    var text10columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text10columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text10columnType = 'templatecolumn';
                    break;
                default :
                    var text10columnType = 'gridcolumn';
                    break;
            }
            //text11
            text11SelectedRecord = ganttConfigStore.findExact('name','text11');
            var text11Record = ganttConfigStore.getAt(text11SelectedRecord);
            var text11Value = text11Record.get('value');
            switch (text11Value) {
                case 'Not Used':
                    var text11Hide = true;
                    break;
                case 'Icon FA':
                    var text11columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text11columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text11columnType = 'templatecolumn';
                    break;
                default :
                    var text11columnType = 'gridcolumn';
                    break;
            }
            //text12
            text12SelectedRecord = ganttConfigStore.findExact('name','text12');
            var text12Record = ganttConfigStore.getAt(text12SelectedRecord);
            var text12Value = text12Record.get('value');
            switch (text12Value) {
                case 'Not Used':
                    var text12Hide = true;
                    break;
                case 'Icon FA':
                    var text12columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text12columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text12columnType = 'templatecolumn';
                    break;
                default :
                    var text12columnType = 'gridcolumn';
                    break;
            }
            //text13
            text13SelectedRecord = ganttConfigStore.findExact('name','text13');
            var text13Record = ganttConfigStore.getAt(text13SelectedRecord);
            var text13Value = text13Record.get('value');
            switch (text13Value) {
                case 'Not Used':
                    var text13Hide = true;
                    break;
                case 'Icon FA':
                    var text13columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text13columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text13columnType = 'templatecolumn';
                    break;
                default :
                    var text13columnType = 'gridcolumn';
                    break;
            }
            //text14
            text14SelectedRecord = ganttConfigStore.findExact('name','text14');
            var text14Record = ganttConfigStore.getAt(text14SelectedRecord);
            var text14Value = text14Record.get('value');
            switch (text14Value) {
                case 'Not Used':
                    var text14Hide = true;
                    break;
                case 'Icon FA':
                    var text14columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text14columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text14columnType = 'templatecolumn';
                    break;
                default :
                    var columnTypemnType = 'gridcolumn';
                    break;
            }
            //text15
            text15SelectedRecord = ganttConfigStore.findExact('name','text15');
            var text15Record = ganttConfigStore.getAt(text15SelectedRecord);
            var text15Value = text15Record.get('value');
            switch (text15Value) {
                case 'Not Used':
                    var text15Hide = true;
                    break;
                case 'Icon FA':
                    var text15columnType = 'templatecolumn';
                    break;
                case 'Icon S/T':
                    var text15columnType = 'templatecolumn';
                    break;
                case 'Icon Fab':
                    var text15columnType = 'templatecolumn';
                    break;
                default :
                    var text15columnType = 'gridcolumn';
                    break;
            }
        } catch(e) {}
        //status date
        var statusDateSelectedRecord = ganttConfigStore.findExact('name','statusDate');
        var statusDateRecord = ganttConfigStore.getAt(statusDateSelectedRecord);
        var statusDateValue = statusDateRecord.get('value');
        Ext.define('Line', {
            extend : 'Ext.data.Model',
            fields : [
                'Date',
                'Text',
                'Cls'
            ]
        });
        var lineStore = Ext.create('Ext.data.JsonStore', {
            model : 'Line',
            data  : [
                {
                    Date : new Date(statusDateValue),
                    Text : 'Status Date',
                    Cls  : 'important'
                }
            ]
        });
        var tpl = new Ext.XTemplate('<!DOCTYPE html>' +
                                    '<html class="' + Ext.baseCSSPrefix + 'border-box {htmlClasses}" style="background-color:white !important">' +
                                    '<head>' +
                                    '<meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />' +
                                    '<title>{column}/{row}</title>' +
                                    '{styles}' +
                                    '</head>' +
                                    '<body class="' + Ext.baseCSSPrefix + 'webkit sch-export {bodyClasses}" style="background-color:white !important">' +
                                    '<tpl if="showHeader">' +
                                    '<div class="ula-print-header" style="width:{totalWidth}px"><h3>{column}/{row}</h3></div>' +
                                    '</tpl>' +
                                    '<tpl>' +
                                        '<div class="ula-print-header">' +
                                            '<h2>MASTER PRODUCTION SCHEDULE (MPS)</h2>' +
                                            '<h3>{[this.getPrintTitle()]}</h3>' +
                                            '<p>~ United Launch Alliance (ULA) Proprietary Information ~</p>' +
                                        '</div>' +
                                        '<div class="ula-print-header-text">' +
                                            '<p>Status Date: {[this.getStatusDate()]}</p>' +
                                        '</div>' +
                                    '</tpl>' +
                                    '<tpl>' +
                                    '<div class="{componentClasses}" style="height:{bodyHeight}px; width:{totalWidth}px; position: relative !important">' +
                                    '{HTML}' +
                                    '</div>' +
                                    '</tpl>' +
                                    '<tpl>' +
                                        '<div class="ula-print-footer">' +
                                            '<h3><div style="float:left">{[this.getPrintFooterLeft()]}</div></h3>' +
                                            '<h3><div style="float:right">{[this.getPrintFooterRight()]}</div></h3>' +
                                            '<h3>Page 1 of 1</h3>' +
                                        '</div>' +
                                    '</tpl>' +
                                    '</body>' +
                                    '</html>',
                                    {
                                        disableFormats: true,
                                        getStatusDate: function() {
                                            var statusDate = statusDateValue;
                                            statusDate = String(statusDate).split(",");
                                            var myYr = statusDate[0];
                                            var myMth = statusDate[1];
                                            var myDay = statusDate[2];
                                            statusDate = myMth+ "/"+myDay+"/"+myYr;
                                            return statusDate;
                                        },
                                        getPrintTitle: function() {
                                            var configStore = Ext.getStore('GanttConfigStoreXml');
                                            var printTitle = configStore.findExact('name','printTitle');
                                            if (printTitle !== -1) {
                                                printTitle = configStore.getAt(printTitle).get('value');
                                            } else {
                                                printTitle = '';
                                            }
                                            return printTitle;
                                        },
                                        getPrintFooterRight: function() {
                                            var configStore = Ext.getStore('GanttConfigStoreXml');
                                            var printFooterRight = configStore.findExact('name','printFooterRight');
                                            if (printFooterRight !== -1){
                                                printFooterRight = configStore.getAt(printFooterRight).get('value');
                                                printFooterRight.replace(/(\r\n|\n|\r)/g,"<br>");
                                            } else {
                                                printFooterRight = '';
                                            }
                                            return printFooterRight;
                                        },
                                        getPrintFooterLeft: function() {
                                            var configStore = Ext.getStore('GanttConfigStoreXml');
                                            var printFooterLeft = configStore.findExact('name','printFooterLeft');
                                            if (printFooterLeft !== -1){
                                                printFooterLeft = configStore.getAt(printFooterLeft).get('value');
                                                printFooterLeft.replace(/(\r\n|\n|\r)/g,"<br>");
                                            } else {
                                                printFooterLeft ='';
                                            }
                                            return printFooterLeft;
                                        },
                                        getPrintFooterCenter: function() {
                                            var configStore = Ext.getStore('GanttConfigStoreXml');
                                            var printFooterCenter = configStore.findExact('name','printFooterCenter');
                                            if (printFooterCenter !== -1) {
                                                printFooterCenter = configStore.getAt(printFooterCenter).get('value');
                                                printFooterCenter.replace(/(\r\n|\n|\r)/g,"<br>");
                                            } else {
                                                printFooterCenter = '';
                                            }
                                            return printFooterCenter;
                                        }
                                    }
        );
        if (ganttExists != -1){
            var ganttPanelCmp = Ext.getCmp('ganttPanel');
            ganttPanelCmp.lockedGrid.reconfigure(ganttPanelCmp.getStore(), [
            {
                xtype : 'gridcolumn',
                dataIndex: 'program',
                header: 'Program'
            },{
                xtype : 'gridcolumn',
                dataIndex: 'tailNumber',
                header: 'Tail Number'
            },{
                xtype : 'gridcolumn',
                dataIndex: 'primaryMission',
                header: 'Primary Mission'
            },{
                xtype: 'treecolumn',
                header: 'Tasks',
                sortable: false,
                dataIndex: 'Name',
                width: 200,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor !== ""){
                        switch (backgroundColor) {
                            case 'red':
                                metadata.style = "background-color:#ff6666;";
                                return value;
                            case 'gray':
                                metadata.style = "background-color:#b2b2b2";
                                return value;
                            case 'orange':
                                metadata.style = "background-color:#FFA500";
                                return value;
                            case 'blue':
                                metadata.style = "background-color:#7f7fff";
                                return value;
                            case 'yellow':
                                metadata.style = "background-color:#ffff00";
                                return value;
                            case 'green':
                                metadata.style = "background-color:#7fbf7f";
                                metadata.style = "";
                                return value;
                        }
                    } else {
                        return value;
                    }
                    }
            },{
                xtype : 'startdatecolumn',
                dateFormat: 'm-d-Y',
                dataIndex: 'StartDate',
                hidden: true
            },{
                xtype : 'enddatecolumn',
                dateFormat: 'm-d-Y',
                dataIndex: 'EndDate',
                hidden: true
            },{
                xtype : 'baselinestartdatecolumn',
                dataIndex: 'BaselineStartDate',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'baselineenddatecolumn',
                dataIndex: 'BaselineEndDate',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'durationcolumn',
                hidden: true
            },{
                xtype : 'datecolumn',
                dataIndex: 'actualstartdate',
                header: 'Actual Start',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'datecolumn',
                dataIndex: 'actualenddate',
                header: 'Actual Finish',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'percentdonecolumn',
                width : 50,
                dataIndex: 'PercentDone',
                hidden: true
            },{
                xtype : 'predecessorcolumn',
                hidden: true
            },{
                xtype : 'notecolumn',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'outline',
                header: 'Outline',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'color',
                header: 'Color',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text01',
                header: text01Value,
                hidden: text01Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text02',
                header: text02Value,
                hidden: text02Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text03',
                header: text03Value,
                hidden: text03Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text04',
                header: text04Value,
                hidden: text04Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text05',
                header: text05Value,
                hidden: text05Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text06',
                header: text06Value,
                hidden: text06Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text07',
                header: text07Value,
                hidden: text07Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text08',
                header: text08Value,
                hidden: text08Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text09',
                header: text09Value,
                hidden: text09Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text10',
                header: text10Value,
                hidden: text10Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text11',
                header: text11Value,
                hidden: text11Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text12',
                header: text12Value,
                hidden: text12Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text13',
                header: text13Value,
                hidden: text13Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text14',
                header: text14Value,
                hidden: text14Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text15',
                header: text15Value,
                hidden: text15Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            }
            ]);
        } else {
            yesNoStore.add({
                name: 'ganttExists'
            });
            component.returnValue = Ext.applyIf(config, {
                taskStore: me.taskStore,
                lockedGridConfig:{
                    width: panelThird,
                    resizable: 'w e'
                },
                readOnly: true,
                baselineVisible: false,
                viewPreset: 'year',
                width: panelWidth,
                plugins: [
                    Ext.create("Sch.plugin.Lines", {
                        showHeaderElements : true,
                        innerTpl           : '<span class="line-text">{Text}</span>',
                        store              : lineStore
                    }),
                    Ext.create("Gnt.plugin.Export", {
                        pluginId: 'exportServer',
                        printServer     : 'http://win1004.dnvr.ulalaunch.com/server.php',
                        tpl				: tpl,
                        afterExport :  function (gantt) {
                            Ext.Ajax.useDefaultXhrHeader = true;
                        },
                        beforeExport : function (gantt) {
                            Ext.Ajax.useDefaultXhrHeader = false;
                        },
                        getStylesheets : function() {
                            var translate   = true,
                                styleSheets = Ext.getDoc().select('link[rel="stylesheet"]'),
                                ctTmp       = Ext.get(Ext.core.DomHelper.createDom({
                                    tag : 'div'
                                })),
                                stylesString;
                            styleSheets.each(function(s) {
                                var node    = s.dom.cloneNode(true);
                                // put absolute URL to node `href` attribute
                                node.setAttribute('href', s.dom.href);
                                ctTmp.appendChild(node);
                            });
                            stylesString = ctTmp.dom.innerHTML + '';
                            return stylesString;
                        }
                    }),
                    new Sch.plugin.ExcelExport()
                ],
                height: panelHeight-75,
                startDate: new Date(startValue),
                endDate: new Date(finishValue),
                rightLabelField: {
                    renderer : function (value, record){
                        var color = record.get('color');
                        if (color !== '') {
                            switch (color) {
                                case 'red':
                                    rightLabel = record.get('Note');
                                    return rightLabel;
                                case 'orange':
                                    rightLabel = record.get('Duration');
                                    rightLabel = Math.round(rightLabel);
                                    return rightLabel+' days';
                            }

                         } else {
                            var rightLabel = record.get('EndDate');
                            var mth = rightLabel.getUTCMonth()+1;
                            var day = rightLabel.getUTCDate();
                            if (day-1===0) {
                                switch (mth) {
                                    case '1':
                                        day = '31';
                                        return day;
                                    case '2':
                                        day = '28';
                                        return day;
                                    case '3':
                                        day = '31';
                                        return day;
                                    case '4':
                                        day = '30';
                                        return day;
                                    case '5':
                                        day = '31';
                                        return day;
                                    case '6':
                                        day = '30';
                                        return day;
                                    case '7':
                                        day = '31';
                                        return day;
                                    case '8':
                                        day = '31';
                                        return day;
                                    case '9':
                                        day = '30';
                                        return day;
                                    case '10':
                                        day = '31';
                                        return day;
                                    case '11':
                                        day = '30';
                                        return day;
                                    case '12':
                                        day = '31';
                                        return day;
                                }
                            } else {
                                day = day-1;
                            }
                            var yr = rightLabel.getUTCFullYear();
                            rightLabel = mth+'/'+day+'/'+yr;
                            return rightLabel;
                         }
                    }
                },
                leftLabelField: {
                   renderer : function (value, record){
                       var color = record.get('color');
                       if (color !=='orange'){
                           var leftLabel = record.get('StartDate');
                           var mth = leftLabel.getUTCMonth()+1;
                           var day = leftLabel.getUTCDate();
                           var yr = leftLabel.getUTCFullYear();
                           leftLabel = mth+'/'+day+'/'+yr;
                           return leftLabel;
                       } else {
                           var leftLabelAlt = 'MR';
                           return leftLabelAlt;
                       }
                   }
                },
                eventRenderer : function (task) {
                    var color = task.get('color');
                    var style = Ext.String.format('background-color: #{0};border-color:#{1}');
                    if (color !=='') {
                    switch (color) {
                        case 'red':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', 'FF0000', 'FF0000');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                            cls = Ext.String.format('background-color: #{0};border-color:#{1}', 'ff0000', 'ff0000');
                                return {
                                style: style,
                                progressBarStyle: progressBarStyle,
                                cls: cls
                                };
                        //orange - Dedicated to the Schedule-Margin gantt line
                        case 'orange':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', 'FFA500', 'FFA500');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                            cls = Ext.String.format('background-color: #{0};border-color:#{1}', 'ffa500', 'ffa500');
                                return {
                                    style: style,
                                    progressBarStyle: progressBarStyle,
                                    cls: cls
                                };
                        case 'blue':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', '9B9BD7', '9B9BD7');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                            cls = style;
                                return {
                                    style: style,
                                    progressBarStyle: progressBarStyle,
                                    cls: cls
                                };
                        case 'yellow':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', 'FFFF80', 'FFFF80');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', 'FFFF80', 'FFFF80');
                            cls = style;
                            return {
                                    style: style,
                                    progressBarStyle: progressBarStyle,
                                    cls: cls
                                };
                        case 'gray':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', 'BEBEB1', 'BEBEB1');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                            cls = style;
                                return {
                                    style: style,
                                    progressBarStyle: progressBarStyle,
                                    cls: cls
                                };
                        case 'green':
                            style = Ext.String.format('background-color: #{0};border-color:#{1}', '80B280', '80B280');
                            progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                            cls = style;
                                return {
                                    style: style,
                                    progressBarStyle: progressBarStyle,
                                    cls: cls
                                };
                    }
                    } else {
                        //green
                        style = Ext.String.format('background-color: #{0};border-color:#{1}', '80B280', '80B280');
                        progressBarStyle = Ext.String.format('background-color: #{0};border-color:#{1}', '000000', '000000');
                        cls = style;
                        return {
                            style: style,
                            progressBarStyle: progressBarStyle,
                            cls: cls
                        };
                    }
            },
            columns: [
            {
                xtype : 'gridcolumn',
                dataIndex: 'program',
                header: 'Program'
            },{
                xtype : 'gridcolumn',
                dataIndex: 'tailNumber',
                header: 'Tail Number'
            },{
                xtype : 'gridcolumn',
                dataIndex: 'primaryMission',
                header: 'Primary Mission'
            },{
                xtype: 'treecolumn',
                header: 'Tasks',
                sortable: false,
                dataIndex: 'Name',
                width: 200,
                bodyCssClass: 'x-tree-noicon',
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor !== ""){
                        switch (backgroundColor) {
                            case 'red':
                                metadata.style = "background-color:#ff6666;";
                                return value;
                            case 'gray':
                                metadata.style = "background-color:#b2b2b2";
                                return value;
                            case 'orange':
                                metadata.style = "background-color:#FFA500";
                                return value;
                            case 'blue':
                                metadata.style = "background-color:#7f7fff";
                                return value;
                            case 'yellow':
                                metadata.style = "background-color:#ffff00";
                                return value;
                            case 'green':
                                metadata.style = "background-color:#7fbf7f";
                                metadata.style = "";
                                return value;
                        }
                    } else {
                        return value;
                    }
                }
            },{
                xtype : 'startdatecolumn',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'enddatecolumn',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                //hidden : true,
                xtype : 'baselinestartdatecolumn',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                //hidden : true,
                xtype : 'baselineenddatecolumn',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'durationcolumn',
                hidden: true
            },{
                xtype : 'datecolumn',
                dataIndex: 'actualstartdate',
                header: 'Actual Start',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'datecolumn',
                dataIndex: 'actualenddate',
                header: 'Actual Finish',
                dateFormat: 'm-d-Y',
                hidden: true
            },{
                xtype : 'percentdonecolumn',
                width : 50,
                hidden: true
            },{
                xtype : 'predecessorcolumn',
                hidden: true
            },{
                xtype : 'notecolumn',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'outline',
                header: 'Outline',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'color',
                header: 'Color',
                hidden: true
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text01',
                header: text01Value,
                hidden: text01Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text02',
                header: text02Value,
                hidden: text02Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text03',
                header: text03Value,
                hidden: text03Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text04',
                header: text04Value,
                hidden: text04Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text05',
                header: text05Value,
                hidden: text05Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text06',
                header: text06Value,
                hidden: text06Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text07',
                header: text07Value,
                hidden: text07Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text08',
                header: text08Value,
                hidden: text08Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text09',
                header: text09Value,
                hidden: text09Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text10',
                header: text10Value,
                hidden: text10Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text11',
                header: text11Value,
                hidden: text11Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text12',
                header: text12Value,
                hidden: text12Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text13',
                header: text13Value,
                hidden: text13Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text14',
                header: text14Value,
                hidden: text14Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            },{
                xtype : 'gridcolumn',
                dataIndex: 'text15',
                header: text15Value,
                hidden: text15Hide,
                renderer: function (value, metadata, record, rowIdx, colIdx, store, view){
                    var backgroundColor = record.get('color');
                    if (backgroundColor=='euTracker'){
                        metadata.style = "background-color:#B2B2FF;";
                        return value;
                    }
                    switch (value) {
                        case '#ICON_1#':
                            metadata.css = 'ula-icon-1';
                            return;
                        case '#ICON_2#':
                            metadata.css = 'ula-icon-2';
                            return;
                        case '#ICON_3#':
                            metadata.css = 'ula-icon-3';
                            return;
                        default:
                            return value;
                    }
                }
            }
            ]
        });
        }

    },

    onLaunch: function() {
        var me = this;
        // get users
        me.getStore('UserStoreXml').load({
            action: 'read',
            scope: me
        });
        // get Selection Variants
        me.getStore('SelectionVariantStoreXml').load({
            action: 'read',
            scope: me
        });
        // get Column Variants
        me.getStore('ColumnStoreXml').load({
            action: 'read',
            scope: me
        });
        // get Materials
        me.getStore('PartNumberStoreXml').load({
            action: 'read',
            scope: me
        });
        //get Column Variants
        var ColumnVariantStoreXml = me.getStore('ColumnStoreXml').load({
            action: 'read',
            scope: me
        });
        //get Versions
        var VersionStoreXml = me.getStore('VersionStoreXml').load({
            action: 'read',
            scope: me
        });
        //get Params
        var ParamStoreXml = me.getStore('ParamStoreXml').load({
            action: 'read',
            scope: me
        });
        //get Tasks
        var taskStoreXml = me.getStore('taskStore').load({
            action: 'read',
            scope: me
        });
        //get Gantt Config
        var GanttConfigStoreXml = me.getStore('GanttConfigStoreXml').load({
            action: 'read',
            scope: me,
            callback: function (){
                var myPanel = Ext.widget('mypanel');
                var mainView = Ext.widget('mainview');
                mainView.insert(0,myPanel);
            }
        });
        var SelectionVariantStoreXml = me.getStore('SelectionVariantStoreXml').load({
            action: 'read',
            scope: me
        });
        var SelectedObjectStoreXml = me.getStore('SelectedObjectStoreXml').load({
            action: 'read',
            scope: me
        });
        var ParamStoreXml = me.getStore('PassedObjectsStoreXml').load({
            action: 'read',
            scope: me,
            callback: function () {
                ParamStoreXml.each(
                function (record) {
                    var name = record.get('name');
                    var value = record.get('value');
                    var selectedStore = Ext.getStore('SelectedObjectStoreXml');
                    switch (name) {
                        case 'network' :
                            var networkParentNode = SelectedObjectStoreXml.getNodeById("networkParentNode");
                            var networkChildNode = networkParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'material' :
                            var materialParentNode = SelectedObjectStoreXml.getNodeById("materialParentNode");
                            var materialkChildNode = materialParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'effectivity' :
                            var effectivityParentNode = SelectedObjectStoreXml.getNodeById("effectivityParentNode");
                            var effectivitykChildNode = effectivityParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'program' :
                            var programParentNode = SelectedObjectStoreXml.getNodeById("programParentNode");
                            var programkChildNode = programParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'primaryMission' :
                            var primaryMissionParentNode = SelectedObjectStoreXml.getNodeById("primaryMissionParentNode");
                            var primaryMissionkChildNode = primaryMissionParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'buildItem' :
                            var buildItemParentNode = SelectedObjectStoreXml.getNodeById("buildItemParentNode");
                            var buildItemkChildNode = buildItemParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'tailNumber' :
                            var tailNumberParentNode = SelectedObjectStoreXml.getNodeById("tailNumberParentNode");
                            var tailNumberkChildNode = tailNumberParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'name' :
                            var nameParentNode = SelectedObjectStoreXml.getNodeById("nameParentNode");
                            var namekChildNode = nameParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                        case 'notes' :
                            var notesParentNode = SelectedObjectStoreXml.getNodeById("notesParentNode");
                            var noteskChildNode = notesParentNode.appendChild({
                                type: name,
                                number: value,
                                leaf: true
                            });
                            break;
                    }
                }
                );
            }
        });
        //Define Selected Objects Nodes
        var rootNode = SelectedObjectStoreXml.getRootNode();
        var networkNode = rootNode.appendChild({
            id: 'networkParentNode',
            type: "Network",
            number: 'Network',
            leaf: false
        });
        var materialNode = rootNode.appendChild({
            id: "materialParentNode",
            type: "Material",
            number: "Material",
            leaf: false
        });
        var effectivityNode = rootNode.appendChild({
            id: "effectivityParentNode",
            type: "Effectivity",
            number: "Effectivity",
            leaf: false
        });
        var plantNode = rootNode.appendChild({
            id: "plantNode",
            type: "Plant",
            number: "Plant",
            leaf: false
        });
        var programNode = rootNode.appendChild({
            id: "programParentNode",
            type: "Program",
            number: "Program",
            leaf: false
        });
        var primaryMissionNode = rootNode.appendChild({
            id: "primaryMissionParentNode",
            type: "Primary Mission",
            number: "Primary Mission",
            leaf: false
        });
        var buildItemNode = rootNode.appendChild({
            id: "buildItemParentNode",
            type: "Build Item",
            number: "Build Item",
            leaf: false
        });
        var tailNumberNode = rootNode.appendChild({
            id: "tailNumberParentNode",
            type: "Tail Number",
            number: "Tail Number",
            leaf: false
                            });
        var nameNode = rootNode.appendChild({
            id: "nameParentNode",
            type: "Name",
            number: "Name",
            leaf: false
        });
        var notesNode = rootNode.appendChild({
            id: "notesParentNode",
            type: "Notes",
            number: "Notes",
            leaf: false
        });

    },

    loadTaskStore: function(aufnr) {
        var me = this;
        debugger;
        me.TaskStoreXml.load({
            action: "read",
            scope: me,
            params: {aufnr: aufnr},
            listeners: {
                'load' : function(taskStore, startDate) {
                    this.loaded=true;
                }
            }
        });


    },

    init: function(application) {
                var me=this;
                Ext.define('taskStoreModel', {
                    extend : 'Gnt.model.Task',

                    // A custom columns
                    clsField : 'Test',
                    fields : [
                    { name : 'network', type : 'string' },
                    { name : 'outline', type : 'string' },
                    { name : 'color', type : 'string' },
                    { name : 'actualstartdate' },
                    { name : 'actualenddate' },
                    { name : 'text01', type : 'string' },
                    { name : 'text02', type : 'string' },
                    { name : 'text03', type : 'string' },
                    { name : 'text04', type : 'string' },
                    { name : 'text05', type : 'string' },
                    { name : 'text06', type : 'string' },
                    { name : 'text07', type : 'string' },
                    { name : 'text08', type : 'string' },
                    { name : 'text09', type : 'string' },
                    { name : 'text10', type : 'string' },
                    { name : 'text11', type : 'string' },
                    { name : 'text12', type : 'string' },
                    { name : 'text13', type : 'string' },
                    { name : 'text14', type : 'string' },
                    { name : 'text15', type : 'string' },
                    { name : 'tailNumber', type : 'tailNumber' },
                    { name : 'primaryMission', type : 'primaryMission' },
                    { name : 'program', type : 'program' },
                    { name : 'taskDescription', type : 'taskDescription' },
                    { name : 'mission', type : 'mission' },
                    { name : 'majorBuildSequence', type : 'majorBuildSequence' },
                    { name : 'minorBuildSequence', type : 'minorBuildSequence' }
                    ]
                });

                me.taskStore = Ext.create('Gnt.data.TaskStore', {
                    autoLoad    : false,
                    alias		: 'store.taskstore',
                    storeId		: 'taskStore',
                    model		: 'taskStoreModel',
                    proxy       : {
                        type    : 'ajax',
                        url: '/dsnwebui/dsnwebui_rest/TaskStoreXml',
                        timeout: 900000,
                        reader  : {
                            type: 'xml',
                            root: 'Tasks',
                            record: '>Task'
                        }
                    }
                });


        this.control({
            "textfield#aufnr": {
                keypress: this.onAufnrKeypress,
                change: this.onAufnrChange
            },
            "container#eventTrigger": {
                click: this.onButtonClick1,
                ganttConfig: this.onEventTriggerGanttConfig
            }
        });
    },

    onTextFieldUpdate: function(field, newValue, oldValue, eOpts) {
        var me = this;
                var searchStore = Ext.getStore('SearchStoreXml');
                var parameters = {};
        searchStore.load ({
            parameters: {
                name: field
            }
        });
    }

});
