/*
 * File: app/view/MyPanel12.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

var start = new Date();
var end = new Date(new Date().setFullYear(start.getFullYear()+1));

Ext.define('MyApp.view.MyPanel12', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.mypanel',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Spacer',
        'Ext.form.field.ComboBox',
        'Ext.toolbar.TextItem',
        'Ext.grid.filters.filter.*',
        'Ext.tree.Panel'
    ],

    id: 'myPanel',
    resizable: true,
    layout: 'card',
    header: false,
    title: 'My Panel',
    initComponent: function() {
        var me = this;
        var ganttConfig = me.processGanttPanel({
            xtype: 'ganttpanel',
            enableBaseline: true,
            showTodayLine: false,
            autoFitOnLoad: true,
            autoRender: true,
            autoShow: true,
            startDate:start,
            endDate:end,
            cls: 'x-tree-noicon',
            id: 'ganttPanel',
            itemId: 'ganttPanel',
            resizable: true,
            header: false,
            icon: 'images/ula-logo.png',
            iconCls: 'ula-header-icon',
            title: 'MASTER PRODUCTION SCHEDULE (MPS)',
            titleAlign: 'center',
            items: [
                {
                    xtype: 'treepanel',
                    hidden: true,
                    width: 150,
                    collapseDirection: 'left',
                    collapsed: false,
                    collapsible: true,
                    title: 'Selected Objects',
                    store: 'SelectedObjectStoreXml',
                    displayField: 'number',
                    rootVisible: false,
                    useArrows: true
                }
            ]
        });

        Ext.applyIf(me, {
            items: [ganttConfig]
        });
        me.dockedItems = [{
            defaultAlign: 'tl-bl',
            xtype: 'toolbar',
            dock: 'top',
            region: 'myPanel-north-handle',
            layout: {
                type: 'hbox',
                padding: 0
            },
            items: [
                {
                    xtype: 'button',
                    height: 35,
                    width: 35,
                    //icon: 'images/power.png',
                    iconAlign: 'bottom',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-play-circle fa-2x'></i></span>",
                    tooltip: 'Run',
                    listeners: {
                        click: {
                            fn: me.openSettings1,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    //icon: 'images/settings.png',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-cog fa-2x'></i></span>",
                    tooltip: 'Selection Settings',
                    listeners: {
                        click: {
                            fn: me.openSettings
                          //  scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var ganttPanelExcel = Ext.getCmp('ganttPanel');
                        var ganttPanelGrid = ganttPanelExcel.lockedGrid;
                        //ganttPanelGrid.initPlugin(
                        //    new Sch.plugin.ExcelExport()
                        //);
                        ganttPanelExcel.exportToExcel();
                    },
                    hidden: true,
                    id: 'exportToExcel',
                    //icon: 'images/excel.png',
                    scale: 'small',
                    text:"Excel"
                },
                {
                    xtype: 'button',
                    id: 'printToPdf',
                    //icon: 'images/pdf.png',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-file-pdf-o fa-2x'></i></span>",
                    tooltip: 'Print to PDF'
                },
                {
                    xtype: 'button',
                    height: 35,
                    //id: '',
                    itemId: 'expand',
                    width: 35,
                    //icon: 'images/expand.png',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-plus-square fa-2x'></i></span>",
                    tooltip: 'Expand All'
                },
                {
                    xtype: 'button',
                    height: 35,
                    itemId: 'minimize',
                    width: 35,
                    //icon: 'images/minimize.png',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-minus-square fa-2x'></i></span>",
                    tooltip: 'Minimize All'
                },
                {
                    xtype: 'button',
                    id:'refresh',
                    tooltip: 'Refresh to clear sort',
                    scale: 'small',
                    text:"<span style='padding-top:10px;'><i class='fa fa-refresh fa-2x'></i></span>",
                    handler: function( btn, e, opts ) {
                        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
                        var store = ganttPanel.getStore();
                        store.sorters.clear();
                        Ext.each(store.data.originalMap,function(key){
                            store.add(store.getById(key));
                        });
                        ganttPanel.getView().refresh();
                    }
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var me = this;
                        var ganttStore = Ext.getStore('GanttConfigStoreXml');
                        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
                        var x = ganttStore.findExact('name', 'baselineShow');
                        //check to see if it is the first baseline request
                        if (x == -1) {
                            ganttStore.add({
                                name: 'baselineShow',
                                value: 'x'
                            });
                            ganttPanel.showBaseline();
                        } else {
                            ganttPanel.el.toggleCls('sch-ganttpanel-showbaseline');
                        }

                    },
                    height: 35,
                    itemId: 'showBaseline',
                    width: 35,
                    enableToggle: true,
                    //icon: 'images/baseline.png',
                    text:"<span style='padding-top:10px;'><i class='fa fa-bold fa-2x'></i></span>",
                    scale: 'small',
                    tooltip: 'Toggle Baseline',
                    listeners: {
                        afterrender: {
                            fn: me.onShowBaselineAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'button',
                    handler: function (button, e) {
                        var me = this;
                        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
                        ganttPanel.el.toggleCls('hide-labels');

                    },
                    height: 35,
                    itemId: 'showLabels',
                    width: 35,
                    enableToggle: true,
                    text:"<span style='padding-top:10px;'><i class='fa fa-tags fa-2x'></i></span>",
                    //icon: 'images/labels.png',
                    scale: 'small',
                    tooltip: 'Toggle Labels'
                },
                {
                    xtype: 'tbspacer',
                    width: 15
                },
                {
                    xtype: 'combobox',
                    fieldLabel: 'Version',
                    labelAlign: 'top',
                    labelWidth: 50,
                    inputId: 'versionValue',
                    displayField: 'description',
                    store: 'VersionStoreXml',
                    listeners: {
                        select: {
                            fn: me.onComboboxSelect1,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onComboboxAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'column_variant',
                    padding: 10,
                    width: 200,
                    fieldLabel: 'Column Variant',
                    labelAlign: 'top',
                    name: 'column_variant',
                    inputId: 'columnVariantValue',
                    displayField: 'description',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'ColumnStoreXml',
                    listeners: {
                        select: {
                            fn: me.onColumn_variantSelect,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onColumn_variantAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    itemId: 'selection_variant',
                    padding: 10,
                    width: 200,
                    fieldLabel: 'Selection Variant',
                    labelAlign: 'top',
                    labelPad: 0,
                    name: 'selection_variant',
                    inputId: 'selectionVariantValue',
                    displayField: 'description',
                    forceSelection: true,
                    queryMode: 'local',
                    store: 'SelectionVariantStoreXml',
                    listeners: {
                        select: {
                            fn: me.onSelection_variantSelect,
                            scope: me
                        },
                        afterrender: {
                            fn: me.onSelection_variantAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'combobox',
                    fieldLabel: 'Change Gantt View',
                    labelAlign: 'top',
                    inputId: 'ganttViewInput',
                    displayField: 'name',
                    store: 'GanttViewStore',
                    listeners: {
                        select: {
                            fn: me.onComboboxSelect,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'tbspacer',
                    width: 10
                },
                {
                    xtype: 'tbtext',
                    id: 'recordCount',
                    text: 'Record Count: 0'
                }
            ]
        }];


        me.callParent(arguments);
    },

    processGanttPanel: function(config) {
        var me = this;
        var selectedObject;
        var columnVariantStore = Ext.getStore('ColumnVariantStoreXml');
        var selectedRecord;
        selectedRecord = columnVariantStore.findExact('selected', 't');

        if (!me.eventTrigger){
            // lazy instantiation of event trigger object
            me.eventTrigger = Ext.create('widget.eventtrigger');
        }
        me.eventTrigger.fireEvent('ganttConfig', me, config);
        return me.returnValue;
    },

    openSettings1: function(button, e, eOpts) {
        var me = this;
        var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
        var promptShow = ganttConfigStore.findExact('name','noPrompt');
        var prompt = Ext.create('Ext.window.MessageBox', {
            buttonText: {
                yes: 'Continue',
                no: 'No'
            }
        });
        if (promptShow === -1){
            prompt.show({
                title: 'Full Schedule?',
                msg: 'No selection data input. Would you like to view the full schedule?',
                buttons: Ext.Msg.YESNO,
                fn: function(btn) {
                    if (btn == 'no') {
                    }
                    if (btn == 'yes') {
                        var myPanel = Ext.ComponentManager.get('myPanel');
                        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
                        var mainView = Ext.ComponentManager.get('mainView');
                        var taskStore = Ext.getStore('taskStore');
                        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                        var paramStore = Ext.getStore('ParamStoreXml');
                        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');

                        var columnVariantIndex = passedConfigStore.findExact('type','columnVariant');
                        if (columnVariantIndex != '-1'){
                            var columnVariantRecord = passedConfigStore.getAt(columnVariantIndex);
                            var columnVariant = columnVariantRecord.get('value');
                            var columnVariantMsg = '';
                        } else {

                        }
                        var selectionVariantIndex = passedConfigStore.findExact('type','selectionVariant');
                        if (selectionVariantIndex != '-1'){
                            var selectionVariantRecord = passedConfigStore.getAt(selectionVariantIndex);
                            var selectionVariant = selectionVariantRecord.get('value');
                            var selectionVariantMsg = '';
                        } else {

                        }
                        var versionIndex = passedConfigStore.findExact('type','version');
                        if (versionIndex != '-1') {
                            var versionRecord = passedConfigStore.getAt(versionIndex);
                            var version = versionRecord.get('value');
                            var versionMsg = '';
                        } else {

                        }
                        //mission Options
                        var missionOptionsIndex = passedObjectsStore.findExact('type','missionOptions');
                        if (missionOptionsIndex == -1) {
                            var missionOptionsInit = '';
                            var missionOptionsType = 'missionOptions';
                            passedObjectsStore.add(
                                {type: missionOptionsType, number: missionOptionsInit}
                            );
                        }
                        //produciton end items
                        var productionEndItemsOptionsIndex = passedObjectsStore.findExact('type','productionEndItemsOptions');
                        if (productionEndItemsOptionsIndex == -1) {
                            var productionEndItemsOptionsInit = '';
                            var productionEndItemsOptionsType = 'productionEndItemsOptions';
                            passedObjectsStore.add(
                                {type: productionEndItemsOptionsType, number: productionEndItemsOptionsInit}
                            );
                        }
                        //major shipped end items
                        var majorShippedEndItemsOptionsIndex = passedObjectsStore.findExact('type','majorShippedEndItemsOptions');
                        if (majorShippedEndItemsOptionsIndex == -1) {
                            var majorShippedEndItemsOptionsInit = '';
                            var majorShippedEndItemsOptionsType = 'majorShippedEndItemsOptions';
                            passedObjectsStore.add(
                                {type: majorShippedEndItemsOptionsType, number: majorShippedEndItemsOptionsInit}
                            );
                        }
                        // sort by
                        var sortByIndex = passedObjectsStore.findExact('type','sortBy');
                        if (sortByIndex == -1) {
                            var sortByInit = '';
                            var sortByType = 'sortBy';
                            passedObjectsStore.add(
                                {type: sortByType, number: sortByInit}
                            );
                        }
                        //show details
                        var showDetailsIndex = passedObjectsStore.findExact('type','showDetails');
                        if (showDetailsIndex == -1) {
                            var showDetailsInit = 'F';
                            var showDetailsType = 'showDetails';
                            passedObjectsStore.add(
                                {type: showDetailsType, number: showDetailsInit}
                            );
                        }
                        //baseline options
                        var baselineOptionsIndex = passedObjectsStore.findExact('type','baselineOptions');
                        if (baselineOptionsIndex == -1) {
                            var baselineOptionsInit = '';
                            var baselineOptionsType = 'baselineOptions';
                            passedObjectsStore.add(
                                {type: baselineOptionsType, number: baselineOptionsInit}
                            );
                        }
                        //build batch
                        var batch = {};
                        batch.proxy = ganttConfigStore.getProxy();
                        batch.proxy.extraParams = {};
                        batch.proxy.setExtraParam('columnVariant',columnVariant);
                        batch.proxy.setExtraParam('selectionVariant',selectionVariant);
                        batch.proxy.setExtraParam('version',version);
                        var count = passedObjectsStore.count();
                        for (i = 0; i < count; i++) {
                            var number = passedObjectsStore.getAt(i).get('number');
                            var type = passedObjectsStore.getAt(i).get('type');
                            batch.proxy.setExtraParam(type+'-'+i,number);
                        }
                        ganttPanel.setLoading(true);
                        ganttConfigStore.load({
                            batch: batch,
                            callback: function() {
                                Ext.suspendLayouts();
                                taskStore.load({
                                    callback: function(resp,opt,d){
                                        Ext.resumeLayouts(true);
                                        var recordCountButton = Ext.ComponentManager.get('recordCount');
                                        var recordCount = taskStore.getCount();

                                        taskStore.data.originalMap = [];
                                        $.each(taskStore.data.map,function(key){
                                            taskStore.data.originalMap.push(key);
                                        });
                                        recordCountButton.setText('Record Count: '+recordCount);
                                        ganttPanel.setLoading(false);
                                    }
                                });
                                return me.returnValue;
                            }
                        });
                    }
                }
            });
        } else {
            var myPanel = Ext.ComponentManager.get('myPanel');
            var ganttPanel = Ext.ComponentManager.get('ganttPanel');
            var mainView = Ext.ComponentManager.get('mainView');
            var taskStore = Ext.getStore('taskStore');
            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
            var paramStore = Ext.getStore('ParamStoreXml');
            var passedConfigStore = Ext.getStore('PassedConfigStoreXml');

            //column variant
            var columnVariantIndex = passedConfigStore.findExact('type','columnVariant');
            if (columnVariantIndex > -1){
                var columnVariantRecord = passedConfigStore.getAt(columnVariantIndex);
                var columnVariant = columnVariantRecord.get('value');
                var columnVariantMsg = '';
            }

            //selection variant
            var selectionVariantIndex = passedConfigStore.findExact('type','selectionVariant');
            if (selectionVariantIndex > -1){
                var selectionVariantRecord = passedConfigStore.getAt(selectionVariantIndex);
                var selectionVariant = selectionVariantRecord.get('value');
                var selectionVariantMsg = '';
            }
            var versionIndex = passedConfigStore.findExact('type','version');
            if (versionIndex > -1) {
                var versionRecord = passedConfigStore.getAt(versionIndex);
                var version = versionRecord.get('value');
                var versionMsg = '';
            }
            //mission Options
            var missionOptionsIndex = passedObjectsStore.findExact('type','missionOptions');
            if (missionOptionsIndex === -1) {
                var missionOptionsInit = '';
                var missionOptionsType = 'missionOptions';
                passedObjectsStore.add({
                    type: missionOptionsType,
                    number: missionOptionsInit
                });
            }
            //produciton end items
            var productionEndItemsOptionsIndex = passedObjectsStore.findExact('type','productionEndItemsOptions');
            if (productionEndItemsOptionsIndex === -1) {
                var productionEndItemsOptionsInit = '';
                var productionEndItemsOptionsType = 'productionEndItemsOptions';
                passedObjectsStore.add(
                    {type: productionEndItemsOptionsType, number: productionEndItemsOptionsInit}
                );
            }
            //major shipped end items
            var majorShippedEndItemsOptionsIndex = passedObjectsStore.findExact('type','majorShippedEndItemsOptions');
            if (majorShippedEndItemsOptionsIndex === -1) {
                var majorShippedEndItemsOptionsInit = '';
                var majorShippedEndItemsOptionsType = 'majorShippedEndItemsOptions';
                passedObjectsStore.add(
                    {type: majorShippedEndItemsOptionsType, number: majorShippedEndItemsOptionsInit}
                );
            }
            // sort by
            var sortByIndex = passedObjectsStore.findExact('type','sortBy');
            if (sortByIndex === -1) {
                var sortByInit = '';
                var sortByType = 'sortBy';
                passedObjectsStore.add(
                    {type: sortByType, number: sortByInit}
                );
            }
            //show details
            var showDetailsIndex = passedObjectsStore.findExact('type','showDetails');
            if (showDetailsIndex === -1) {
                var showDetailsInit = 'No';
                var showDetailsType = 'showDetails';
                passedObjectsStore.add(
                    {type: showDetailsType, number: showDetailsInit}
                );
            }
            //baseline options
            var baselineOptionsIndex = passedObjectsStore.findExact('type','baselineOptions');
            if (baselineOptionsIndex === -1) {
                var baselineOptionsInit = '';
                var baselineOptionsType = 'baselineOptions';
                passedObjectsStore.add(
                    {type: baselineOptionsType, number: baselineOptionsInit}
                );
            }
            //build batch
            var batch = {};
            batch.proxy = ganttConfigStore.getProxy();
            batch.proxy.extraParams = {};
            batch.proxy.setExtraParam('columnVariant',columnVariant);
            batch.proxy.setExtraParam('selectionVariant',selectionVariant);
            batch.proxy.setExtraParam('version',version);
            var count = passedObjectsStore.count();
            for (i = 0; i < count; i++) {
                var number = passedObjectsStore.getAt(i).get('number');
                var type = passedObjectsStore.getAt(i).get('type');
                batch.proxy.setExtraParam(type+'-'+i,number);
            }
            ganttPanel.setLoading(true);
            ganttConfigStore.load({
                batch: batch,
                callback: function() {
                    Ext.suspendLayouts();
                    taskStore.load({
                        callback: function(){
                            Ext.resumeLayouts(true);
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value:''
                            });
                            var recordCountButton = Ext.ComponentManager.get('recordCount');
                            var recordCount = taskStore.getCount();

                            taskStore.data.originalMap = [];
                            $.each(taskStore.data.map,function(key){
                                taskStore.data.originalMap.push(key);
                            });
                            recordCountButton.setText('Record Count: '+recordCount);
                            ganttPanel.setLoading(false);
                        }
                    });
                    return me.returnValue;
                }
            });
        }

    },

    openSettings: function(button, e, eOpts) {
        var me = this;
        e.preventDefault();
        e.stopPropagation();
        Ext.require([
            'Ext.grid.*',
            'Ext.data.*',
            'Ext.util.*',
            'Ext.grid.plugin.BufferedRenderer'
        ]);

        //get stores
        //create the window
       /* var selectionWindow = window.appState.selectionWindow;//Ext.get('selectionWindow')
        if (Ext.isDefined(selectionWindow) && !selectionWindow.isDestroyed) {
            selectionWindow.show();
            return;
        }*/
        var NetworkStoreXml = Ext.getStore('NetworkStoreXml');
        var PartNumberStoreXml = Ext.getStore('PartNumberStoreXml');
        var ControlPointStoreXml = Ext.getStore('ControlPointStoreXml');
        var SelectedObjectStoreXml = Ext.getStore('SelectedObjectStoreXml');
        var PlantStoreXml = Ext.getStore('PlantStoreXml');
        var ProgramStoreXml = Ext.getStore('ProgramStoreXml');
        var PrimaryMissionStoreXml = Ext.getStore('PrimaryMissionStoreXml');
        var BuildItemStoreXml = Ext.getStore('BuildItemStoreXml');
        var TailNumberStoreXml = Ext.getStore('TailNumberStoreXml');
        var EffectivityStoreXml = Ext.getStore('EffectivityStoreXml');
        var NameStoreXml = Ext.getStore('NameStoreXml');
        var NotesStoreXml = Ext.getStore('NotesStoreXml');
        var SearchStoreXml = Ext.getStore('SearchStoreXml');
        var TaskStoreXml = Ext.getStore('TaskStoreXml');
        var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
        var GanttConfigStoreXml = Ext.getStore('GanttConfigStoreXml');
        var resultsStore = Ext.getStore('Results');
        var sortByStore = Ext.getStore('SortByStore');
        var summaryOptionsStore = Ext.getStore('SummaryOptionsStore2');
        var baselineOptionsStore = Ext.getStore('BaselineOptionsStore');
        var variantTypeStore = Ext.getStore('VariantTypeStore');
        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
        var selectedObjectsStore = Ext.getStore('SelectedObjectsStoreXml');
        var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
        var parameters = {};
        var paramStore = Ext.getStore('ParamStoreXml');
        var deleteStore = Ext.getStore('DeleteStore');
        var main = MyApp.app.getController('Main');
        if (!deleteStore) {
            deleteStore = Ext.create('Ext.data.Store',{
                fields: [
                    {name: 'name', type: 'string'},
                    {name: 'description',  type: 'string'},
                    {name: 'type',       type: 'int'}
                ],
                storeId: 'DeleteStore'
            });
        }
       /* Ext.define('Ext.data.SelectedObjectModel', {
            extend: 'Ext.data.Model',
            fields: [{name: 'number', type: 'string'}],
            proxy: {
                type: 'memory'
            }});
        */
        //define selection window
        //var selectionWindow = Ext.ComponentQuery.query('selectionwindow[fieldname='+me.itemId+']')[0];

        var clickMenu = Ext.menu.Menu({
            id:'nodeClickMenu',
            focusOnToFront: true,
            items: [
                {
                    id:'delete',
                    text:'Delete',
                    handler: function () {
                        record.remove();
                        passedObjectsStore.remove(record);
                    }
                }
            ]

        });

        // Left Menu selectionTree Panel ------------------------------------------------------------------------------
        var selectionTree = new Ext.tree.Panel ({
            title: 'Selected Objects',
            region: 'west',
            margins: '5 0 0 0',
            cmargins: '5 5 0 0',
            store: 'SelectedObjectStoreXml',
            displayField: 'number',
            collapsed: false,
            width: 150,
            rootVisible: false,
            listeners: {
                itemclick: function(me,record,item,index,e,eOpts){
                    var clickMenu = new Ext.menu.Menu({
                        items: [
                            {
                                id:'delete',
                                text:'Delete',
                                handler: function () {
                                    record.remove();
                                    var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                                    var selectedRecordIndex = passedObjectsStore.findExact('number',record.get('number'));
                                    var selectedRecord = passedObjectsStore.getAt(selectedRecordIndex);
                                    passedObjectsStore.remove(selectedRecord);
                                }
                            }
                        ]
                    });
                    if (record.get('depth')===2) {
                        clickMenu.showAt(e.xy);
                    }
                }
            },
            scope: me
        });

        //define results grids
        var networkGrid = new Ext.grid.GridPanel ({
            store: NetworkStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Network",
                    dataIndex: 'number',
                    width: 150
                },
                {
                    text: "Network Description",
                    dataIndex: 'description',
                    width: 150
                },
                {
                    text: "Plant",
                    dataIndex: 'plant',
                    width: 150
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (networkGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = networkGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var networkParentNode = SelectedObjectStoreXml.getNodeById("networkParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            networkParentNode.expand();
                            if (recordDup == -1) {
                                var networkChildNode = networkParentNode.appendChild({
                                    type: 'Network',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'network', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var materialGrid = new Ext.grid.GridPanel ({
            store: PartNumberStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Material",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (materialGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = materialGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var materialParentNode = SelectedObjectStoreXml.getNodeById("materialParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            materialParentNode.expand();
                            if (recordDup == -1) {
                                var materialChildNode = materialParentNode.appendChild({
                                    type: 'Material',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'material', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var plantGrid = new Ext.grid.GridPanel ({
            store: PlantStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Plant",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (plantGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = plantGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var plantParentNode = SelectedObjectStoreXml.getNodeById("plantParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            plantParentNode.expand();
                            if (recordDup == -1) {
                                var plantChildNode = plantParentNode.appendChild({
                                    type: 'Plant',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'plant', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var programGrid = new Ext.grid.GridPanel ({
            store: ProgramStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Program",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (programGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = programGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var programParentNode = SelectedObjectStoreXml.getNodeById("programParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            programParentNode.expand();
                            if (recordDup == -1) {
                                var programChildNode = programParentNode.appendChild({
                                    type: 'Program',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'program', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var effectivityGrid = new Ext.grid.GridPanel ({
            store: EffectivityStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Effectivity",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (effectivityGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = effectivityGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var effectivityParentNode = SelectedObjectStoreXml.getNodeById("effectivityParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            effectivityParentNode.expand();
                            if (recordDup == -1) {
                                var effectivityChildNode = effectivityParentNode.appendChild({
                                    type: 'Effectivity',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'effectivity', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var primaryMissionGrid = new Ext.grid.GridPanel ({
            store: PrimaryMissionStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Primary Mission",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (primaryMissionGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = primaryMissionGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var primaryMissionParentNode = SelectedObjectStoreXml.getNodeById("primaryMissionParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            primaryMissionParentNode.expand();
                            if (recordDup == -1) {
                                var primaryMissionChildNode = primaryMissionParentNode.appendChild({
                                    type: 'Primary Mission',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'primaryMission', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var buildItemGrid = new Ext.grid.GridPanel ({
            store: BuildItemStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Build Item",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (buildItemGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = buildItemGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var buildItemParentNode = SelectedObjectStoreXml.getNodeById("buildItemParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            buildItemParentNode.expand();
                            if (recordDup == -1) {
                                var buildItemChildNode = buildItemParentNode.appendChild({
                                    type: 'Build Item',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'buildItem', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var tailNumberGrid = new Ext.grid.GridPanel ({
            store: TailNumberStoreXml,
            displayField: 'number',
            loadMask: true,
            height: 280,
            viewConfig: {
                stripeRows: true,
                enableTextSelection: true,
                style: { overflow: 'scroll', overflowX: 'hidden' }
            },
            columns: [
                {
                    text: "Tail Number",
                    dataIndex: 'number',
                    width: 200
                },
                {
                    text: "Description",
                    dataIndex: 'description',
                    width: 200
                },
                {
                    menuDisabled:true,
                    sortable: false,
                    xtype: 'actioncolumn',
                    width: 25,
                    items: [{
                        icon: 'images/add.png',
                        tooltip: 'Add Item',
                        handler: function (tailNumberGrid, rowIndex, colIndex) {
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var taskStore = Ext.getStore('taskStore');
                            var record = tailNumberGrid.getStore().getAt(rowIndex);
                            var recordNumber = record.get('number');
                            var tailNumberParentNode = SelectedObjectStoreXml.getNodeById("tailNumberParentNode");
                            var recordDup = passedObjectsStore.findExact('number',recordNumber);
                            tailNumberParentNode.expand();
                            if (recordDup == -1) {
                                var tailNumberChildNode = tailNumberParentNode.appendChild({
                                    type: 'Tail Number',
                                    number: recordNumber,
                                    leaf: true
                                });
                                passedObjectsStore.add(
                                    {type: 'tailNumber', number: recordNumber}
                                );
                            } else {
                                alert('record already exists');
                            }
                        }
                    }]
                }
            ]
        });
        var passedConfigStore  = Ext.getStore('PassedConfigStoreXml');
        var version = passedConfigStore.getAt(passedConfigStore.findExact('type','version')).get('value');
        //define search triggers
        Ext.define('Ext.ux.NetworkCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.networkcustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                var passedConfigStore  = Ext.getStore('PassedConfigStoreXml');
                var version = passedConfigStore.getAt(passedConfigStore.findExact('type','version')).get('value');
                NetworkStoreXml.removeAll();
                networkInput  = Ext.getCmp('networkForm').getValue();
                if (networkInput === ""){
                    networkInput = '*';
                }
                var batch = {};
                batch.proxy = NetworkStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', networkInput);
                NetworkStoreXml.load ({
                    params: {
                        search: networkInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.PartNumberCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.partnumbercustomtrigger',

            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                PartNumberStoreXml.removeAll();
                partNumberInput  = Ext.getCmp('materialForm').getValue();
                if (partNumberInput === ""){
                    partNumberInput = '*';
                }
                var batch = {};
                batch.proxy = PartNumberStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', partNumberInput);
                PartNumberStoreXml.load ({
                    params: {
                        search: partNumberInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.PlantCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.plantcustomtrigger',

            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                PlantStoreXml.removeAll();
                plantInput  = Ext.getCmp('plantForm').getValue();;
                if (plantInput === ""){
                    plantInput = '*';
                }
                var batch = {};
                batch.proxy = PlantStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', plantInput);
                PlantStoreXml.load ({
                    params: {
                        search: plantInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.ProgramCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.programcustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                ProgramStoreXml.removeAll();
                programInput  = Ext.getCmp('programForm').getValue();;
                if (programInput === ""){
                    programInput = '*';
                }
                var batch = {};
                batch.proxy = ProgramStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', programInput);
                ProgramStoreXml.load ({
                    params: {
                        search: programInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.PrimaryMissionCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.primarymissioncustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                PrimaryMissionStoreXml.removeAll();
                primaryMissionInput  = Ext.getCmp('primaryMissionForm').getValue();
                if (primaryMissionInput === ""){
                    primaryMissionInput = '*';
                }
                var batch = {};
                batch.proxy = PrimaryMissionStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', primaryMissionInput);
                PrimaryMissionStoreXml.load ({
                    params: {
                        search: primaryMissionInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.BuildItemCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.builditemcustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                BuildItemStoreXml.removeAll();
                buildItemInput  = Ext.getCmp('buildItemForm').getValue();
                if (buildItemInput === ""){
                    buildItemInput = '*';
                }
                var batch = {};
                batch.proxy = BuildItemStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', buildItemInput);
                BuildItemStoreXml.load ({
                    params: {
                        search: buildItemInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.TailNumberCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.tailnumbercustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                TailNumberStoreXml.removeAll();
                tailNumberInput  = Ext.getCmp('tailNumberForm').getValue();
                if (tailNumberInput === ""){
                    tailNumberInput = '*';
                }
                var batch = {};
                batch.proxy = TailNumberStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', tailNumberInput);
                TailNumberStoreXml.load ({
                    params: {
                        search: tailNumberInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.EffectivityCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.effectivitycustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                EffectivityStoreXml.removeAll();
                effectivityInput  = Ext.getCmp('effectivityForm').getValue();
                if (effectivityInput === ""){
                    effectivityInput = '*';
                }
                var batch = {};
                batch.proxy = EffectivityStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', effectivityInput);
                EffectivityStoreXml.load ({
                    params: {
                        search: effectivityInput,
                        version: version
                    }
                });
            }
        });
        Ext.define('Ext.ux.NameCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.namecustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field){
                var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                ganttConfigStore.add({
                    name: 'noPrompt',
                    value: ''
                });
                var updated = 'false';
                passedObjectsStore.add(
                    {type: 'name', number: field.value}
                );
                var nameParentNode = SelectedObjectStoreXml.getNodeById("nameParentNode");
                var nameChildNode = nameParentNode.appendChild({
                    type: 'Name',
                    number: field.value,
                    leaf: true
                });
            }
        });
        Ext.define('Ext.ux.NotesCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.notescustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field){
                var updated = 'false';
                var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                ganttConfigStore.add({
                    name: 'noPrompt',
                    value: ''
                });
                passedObjectsStore.add(
                    {type: 'notes', number: field.value}
                );
                var notesParentNode = SelectedObjectStoreXml.getNodeById("notesParentNode");
                var notesChildNode = notesParentNode.appendChild({
                    type: 'Notes',
                    number: field.value,
                    leaf: true
                });
            }
        });
        Ext.define('Ext.ux.MaterialCustomTrigger', {
            extend: 'Ext.form.field.Trigger',
            alias: 'widget.materialcustomtrigger',
            // override onTriggerClick
            onTriggerClick: function(field) {
                var updated = 'false';
                PartNumberStoreXml.removeAll();
                materialInput  = Ext.getCmp('materialForm').getValue();
                if (materialInput === ""){
                    materialInput = '*';
                }
                var batch = {};
                batch.proxy = PartNumberStoreXml.getProxy();
                batch.proxy.extraParams = {};
                batch.proxy.setExtraParam('search', materialInput);
                PartNumberStoreXml.load ({
                    params: {
                        search: materialInput,
                        version: version
                    }
                });
            }
        });

        // saveForm ---Save Selection Variant-----------------------------------------------------------------------
        var saveForm = new Ext.FormPanel ({
            title: 'Save Options',
            padding: 10,
            layout: {
                pack: 'center'
            },
            border: '0',
            items: [
            {
                xtype: 'combobox',
                flex: 3,
                id: 'availableVariants',
                fieldLabel: 'Available',
                inputId: 'selectAvailableVariants',
                name: 'availableVariants',
                value: 'Select',
                displayField: 'description',
                forceSelection: false,
                queryMode: 'local',
                width: 400,
                store: selectionVariantStore,
                listeners: {
                    select: {
                        fn: function (comp,val,opt) {
                           Ext.MessageBox.confirm(
                                'Confirm',
                                'Override: '+val.get('description'),
                                function (e) {
                                    if (e === 'yes') {
                                        var form = comp.ownerCt;
                                        form.items.map['saveSelectionVariantName'].setValue(val.get('name'));
                                        var description = val.get('description');
                                        if(description.indexOf('-') > -1){
                                            var descArray = description.split('-');
                                            descArray.shift();
                                            description = descArray.join('').trim();
                                        }
                                        form.items.map['saveSelectionVariantDescription'].setValue(description);
                                        form.items.map['variantType'].setValue(val.get('type') === 'G'?'Global':'User');
                                        console.log(JSON.stringify(val.data));
                                        window.setTimeout(function(){
                                            Ext.MessageBox.alert('Override','Click Save Variant to override.');
                                        },1)
                                    }
                                  });
                        },
                        scope: me
                    }
                }
            },{
                xtype: 'textfield',
                flex: 1,
                id: 'saveSelectionVariantName',
                fieldLabel: 'Save As',
                inputId: 'saveInput',
                width: 400,
                emptyText: 'Save Seletion Variant'
            }, {
                xtype: 'textfield',
                flex: 2,
                id: 'saveSelectionVariantDescription',
                fieldLabel: 'Description',
                inputId: 'descriptionInput',
                width: 400,
                emptyText: 'Save Seletion Variant'
            }, {
                xtype: 'combobox',
                flex: 3,
                id: 'variantType',
                fieldLabel: 'Type',
                inputId: 'saveVariantTypeInput',
                name: 'variantType',
                value: 'User',
                displayField: 'name',
                forceSelection: true,
                queryMode: 'local',
                width: 400,
                store: variantTypeStore
            }
            ]});
        var userGlobalIndex = GanttConfigStoreXml.findExact('name','saveGlobal');
        if (userGlobalIndex === -1){
            var variantType = Ext.ComponentManager.get('variantType');
            if(variantType !== undefined){
                variantType.hide();
            }
            //var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
            var count = selectionVariantStore.count();
            for (i = 0; i < count; i++) {
                var record = selectionVariantStore.getAt(i);
                var type = record.get('type');
                if (type == 'Global') {
                    deleteStore.add({
                        name: record.get('name'),
                        description: record.get('description'),
                        type: record.get('type')
                    });
                }
            }
        } else {
            var userGlobalRecord = GanttConfigStoreXml.getAt(userGlobalIndex);
            var userGlobalValue = userGlobalRecord.get('value');
            if (userGlobalValue != 'X') {
                var variantType = Ext.ComponentManager.get('variantType');
                variantType.hide();
                //Update Delete Store
            } else {
                var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
                var count = selectionVariantStore.count();
                for (i = 0; i < count; i++) {
                    var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
                    var record = selectionVariantStore.getAt(i);
                    var type = record.get('type');
                    if (type == 'Global' || type == 'User') {
                        deleteStore.add({
                            name: record.get('name'),
                            description: record.get('description'),
                            type: record.get('type')
                        });
                    }
                }
            }
        }
        //get summary value if existing
        //mission Options
        var missionOptionsIndex = paramStore.findExact('name','missionOptions');
        if (missionOptionsIndex !== -1) {
            var missionOptionsRecord = paramStore.getAt(missionOptionsIndex);
            var missionOptionsInit = missionOptionsRecord.get('value');
        } else {
            var missionOptionsInit = '';
        }
        //produciton end items
        var productionEndItemsOptionsIndex = paramStore.findExact('name','productionEndItemsOptions');
        if (productionEndItemsOptionsIndex !== -1) {
            var productionEndItemsOptionsRecord = paramStore.getAt(productionEndItemsOptionsIndex);
            var productionEndItemsOptionsInit = productionEndItemsOptionsRecord.get('value');
        } else {
            var productionEndItemsOptionsInit = '';
        }
        //major shipped end items
        var majorShippedEndItemsOptionsIndex = paramStore.findExact('name','majorShippedEndItemsOptions');
        if (majorShippedEndItemsOptionsIndex !== -1){
            var majorShippedEndItemsOptionsRecord = paramStore.getAt(majorShippedEndItemsOptionsIndex);
            var majorShippedEndItemsOptionsInit = majorShippedEndItemsOptionsRecord.get('value');
        } else {
            var majorShippedEndItemsOptionsInit = '';
        }
        // sort by
        var sortByIndex = paramStore.findExact('name','sortBy');
        if (sortByIndex !== -1) {
            var sortByRecord = paramStore.getAt(sortByIndex);
            var sortByInit = sortByRecord.get('value');
        } else {
            var sortByInit = '';
        }
        // show details
        var showDetailsIndex = paramStore.findExact('name','showDetails');
        if (showDetailsIndex !== -1) {
            var showDetailsRecord = paramStore.getAt(showDetailsIndex);
            var showDetailsInit = showDetailsRecord.get('value');
        } else {
            var showDetailsInit = 'No';
            paramStore.add({
                name: 'showDetails',
                value: 'No'
            });
        }
        // baseline options
        var baselineOptionsIndex = paramStore.findExact('name','baselineOptions');
        if (baselineOptionsIndex !== -1) {
            var baselineOptionsRecord = paramStore.getAt(baselineOptionsIndex);
            var baselineOptionsInit = baselineOptionsRecord.get('value');
        } else {
            var baselineOptionsInit = '';
        }

        // summaryOptionsForm ------------------------------------------------------------------------------
        var summaryOptionsForm = new Ext.FormPanel ({
            title: 'Summary Options',
            layout: 'vbox',
            padding: 10,
            items: [{
                xtype: 'combobox',
                flex: 2,
                itemId: 'missionOptions',
                fieldLabel: 'Mission',
                inputId: 'missionOptionsValue',
                name: 'missionOptions',
                width: 400,
                displayField: 'name',
                forceSelection: true,
                queryMode: 'local',
                value: missionOptionsInit,
                store: summaryOptionsStore,
                listeners: {
                    select: {
                        fn: function(){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var missionOptionsIndex = passedObjectsStore.findExact('type','missionOptions');
                            var type = 'missionOptions';
                            var number = missionOptionsValue.value;
                            if (missionOptionsIndex === -1){
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            } else {
                                passedObjectsStore.removeAt(missionOptionsIndex);
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            }
                        },
                        scope: me
                    }
                }

            },{

                xtype: 'combobox',
                flex: 2,
                itemId: 'majorShippedEndItemsOptions',
                width: 400,
                fieldLabel: 'Major Shipped End Items',
                inputId: 'majorShippedEndItemsValue',
                name: 'majorShippedEndItemsOptions',
                value: majorShippedEndItemsOptionsInit,
                displayField: 'name',
                forceSelection: true,
                queryMode: 'local',
                store: summaryOptionsStore,
                listeners: {
                    select: {
                        fn: function(){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var majorShippedEndItemsOptionsIndex = passedObjectsStore.findExact('type','majorShippedEndItemsOptions');
                            var type = 'majorShippedEndItemsOptions';
                            var number = majorShippedEndItemsValue.value;
                            if (majorShippedEndItemsOptionsIndex === -1){
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            } else {
                                passedObjectsStore.removeAt(majorShippedEndItemsOptionsIndex);
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            }
                        },
                        scope: me
                    }
                }
            },{
                xtype: 'combobox',
                flex: 1,
                itemId: 'productionEndItems',
                fieldLabel: 'Production End Items',
                width: 400,
                inputId: 'productionEndItemsOptionValue',
                name: 'productionEndItems',
                displayField: 'name',
                value: productionEndItemsOptionsInit,
                forceSelection: true,
                queryMode: 'local',
                store: summaryOptionsStore,
                listeners: {
                    select: {
                        fn: function(){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var productionEndItemsOptionsIndex = passedObjectsStore.findExact('type','productionEndItemsOptions');
                            var type = 'productionEndItemsOptions';
                            var number = productionEndItemsOptionValue.value;
                            if (productionEndItemsOptionsIndex === -1){
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            } else {
                                passedObjectsStore.removeAt(productionEndItemsOptionsIndex);
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            }
                        },
                        scope: me
                    }
                }
            }, {

                xtype: 'combobox',
                flex: 2,
                width: 400,
                itemId: 'sortBy',
                fieldLabel: 'Sort By',
                inputId: 'sortByValue',
                name: 'sortBy',
                displayField: 'name',
                value: sortByInit,
                forceSelection: true,
                queryMode: 'local',
                store: sortByStore,
                listeners: {
                    select: {
                        fn: function(){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var sortByIndex = passedObjectsStore.findExact('type','sortBy');
                            var type = 'sortBy';
                            var number = sortByValue.value;
                            if (sortByIndex === -1){
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            } else {
                                passedObjectsStore.removeAt(sortByIndex);
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            }
                        },
                        scope: me
                    }
                }

            }, {

                xtype: 'combobox',
                flex: 2,
                width: 400,
                itemId: 'baselineOptions',
                fieldLabel: 'Secondary Bar Options',
                inputId: 'baselineOptionsValue',
                name: 'baselineOptions',
                displayField: 'name',
                value: baselineOptionsInit,
                forceSelection: true,
                queryMode: 'local',
                store: baselineOptionsStore,
                listeners: {
                    select: {
                        fn: function(){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var baselineOptionsIndex = passedObjectsStore.findExact('type','baselineOptions');
                            var type = 'baselineOptions';
                            var number = baselineOptionsValue.value;
                            if (baselineOptionsIndex === -1){
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            } else {
                                passedObjectsStore.removeAt(baselineOptionsIndex);
                                passedObjectsStore.add(
                                    {type: type, number: number}
                                );
                            }
                        },
                        scope: me
                    }
                }

            },{
                xtype: 'combobox',
                flex: 2,
                width: 200,
                itemId: 'showDetails',
                fieldLabel: 'Show Details',
                inputId: 'showDetailsValue',
                name: 'showDetails',
                value: showDetailsInit,
                displayField: 'name',
                labelAlign: 'left',
                store: Ext.getStore('YesNoStore'),
                listeners: {
                    select: {
                        fn: function (){
                            var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
                            ganttConfigStore.add({
                                name: 'noPrompt',
                                value: ''
                            });
                            var paramStore = Ext.getStore('ParamStoreXml');
                            var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                            var showDetailsIndex = passedObjectsStore.findExact('type','showDetails');
                            var name = 'showDetails';
                            var value = showDetailsValue.value;
                            switch (value){
                                case 'Yes':
                                    value = 'T';
                                    break;
                                case 'No':
                                    value = 'F';
                                    break;
                                case 'Only Summary':
                                    value = 'Only Summary';
                                    break;
                                default:
                                    value = 'T';
                            }
                            if (showDetailsIndex === -1) {
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                            } else {
                                passedObjectsStore.removeAt(showDetailsIndex);
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                            }
                        }
                    }
                }
            }, {
                xtype: 'button',
                icon: 'images/close-icon.png',
                text: '',
                tooltip: 'Apply Options',
                handler: function (button, e,opt){
                    //var selectionWindow = Ext.get('selectionWindow');
                    window.appState.selectionWindow.close();
                    Ext.MessageBox.confirm(
                        'Confirm',
                        'Would you like to reload data?',
                        function (e) {
                           e === 'yes' && me.up('panel').openSettings1(button, e,opt);
                        });
                }
            }
            ]
        });
        var submitButton = new Ext.button.Button ({
            text: 'Save Variant',
            dock: 'right',
            handler: function(button, e) {
                var taskStore = Ext.getStore('taskStore'),
                    passedObjectsStore = Ext.getStore('PassedObjectsStoreXml'),
                    paramStore = Ext.getStore('ParamStoreXml'),
                    selectionVariantStore = Ext.getStore('SelectionVariantStoreXml'),
                    batch = {};
                batch.proxy = taskStore.getProxy();
                var saveNameInput = saveInput.value,
                    saveDescriptionInput = descriptionInput.value,
                    variantTypeInput = saveVariantTypeInput.value,
                    missionOptionsInput = missionOptionsValue.value,
                    productionEndItemsOptionInput = productionEndItemsOptionValue.value,
                    majorShippedEndItemsInput = majorShippedEndItemsValue.value,
                    sortByInput = sortByValue.value,
                    showDetailsInput = showDetailsValue.value,
                    baselineOptionsInput = baselineOptionsValue.value,
                    variantTypeExists = passedObjectsStore.findExact('type','variantType'),
                    saveNameExists = passedObjectsStore.findExact('type','saveName'),
                    saveDescriptionExists = passedObjectsStore.findExact('type','saveDescription'),
                    missionOptionsExists = passedObjectsStore.findExact('type','missionOptions'),
                    productionEndItemsOptionsExists = passedObjectsStore.findExact('type','productionEndItemsOptions'),
                    majorShippedEndItemsOptionsExists = passedObjectsStore.findExact('type','majorShippedEndItemsOptions'),
                    showDetailsExists = passedObjectsStore.findExact('type','showDetails'),
                    sortByExists = passedObjectsStore.findExact('type','sortBy'),
                    baselineOptionsExists = passedObjectsStore.findExact('type','baselineOptions');
                if (variantTypeExists === -1){
                    if (variantTypeInput == 'Global') {
                        variantTypeInput = 'G';
                    } else {
                        variantTypeInput = 'U';
                    }
                    passedObjectsStore.add(
                        {type: 'variantType', number: variantTypeInput}
                    );
                }
                if (saveNameExists === -1) {
                    passedObjectsStore.add(
                        {type: 'saveName', number: saveNameInput}
                    );
                    var selectionVariantExists = selectionVariantStore.findExact('name',saveNameInput);
                    if (selectionVariantExists == -1) {
                        selectionVariantStore.add(
                            {
                                name: saveNameInput,
                                description: saveDescriptionInput,
                                type: variantTypeInput
                            }
                        );
                        selectionVariantStore.sync();
                    }
                }
                if (saveDescriptionExists === -1){
                    passedObjectsStore.add(
                        {type: 'saveDescription', number: saveDescriptionInput}
                    );
                }
                if (missionOptionsExists === -1){
                    passedObjectsStore.add(
                        {type: 'missionOptions', number: missionOptionsInput}
                    );
                }
                if (productionEndItemsOptionsExists === -1){
                    passedObjectsStore.add(
                        {type: 'productionEndItemsOptions', number: productionEndItemsOptionInput}
                    );
                }
                if (majorShippedEndItemsOptionsExists === -1){
                    passedObjectsStore.add(
                        {type: 'majorShippedEndItemsOptions', number: majorShippedEndItemsInput}
                    );
                }
                if (sortByExists === -1){
                    passedObjectsStore.add(
                        {type: 'sortBy', number: sortByInput}
                    );
                }
                if (showDetailsExists === -1){
                    passedObjectsStore.add(
                        {type: 'showDetails', number: showDetailsInput}
                    );
                }
                if (baselineOptionsExists === -1){
                    passedObjectsStore.add(
                        {type: 'baselineOptions', number: baselineOptionsInput}
                    );
                }
                var passedObjects = passedObjectsStore.getRange();
                var count = passedObjects.length;
                for (var i = 0; i < count; i++) {
                    var number = passedObjectsStore.getAt(i).get('number');
                    var type = passedObjectsStore.getAt(i).get('type');
                    batch.proxy.setExtraParam(type+'-'+i,number);
                }
                taskStore.load({
                    batch: batch,
                    callback: function (){
                        Ext.MessageBox.alert(
                            'Saved','Variant saved'
                        );
                    }
                });
            }
        });
        var globalUser = Ext.getStore('GanttConfigStoreXml').findExact('name','saveGlobal');
        if (globalUser !== -1) {
            globalUser = Ext.getStore('GanttConfigStoreXml').getAt(globalUser).get('value');
            if (globalUser === 'X'){
                globalUser = true;
            } else {
                globalUser = false;
            }
        } else {
            globalUser = false;
        }

        var count = selectionVariantStore.count();
        for (i = 0; i < count; i++) {
            var record = selectionVariantStore.getAt(i);

            if (globalUser === true){
                deleteStore.add({
                    name: record.get('name'),
                    description: record.get('description'),
                    type: record.get('type')
                });
            } else {
                if (record.get('type') === 'User') {
                    deleteStore.add({
                        name: record.get('name'),
                        description: record.get('description'),
                        type: record.get('type')
                    });
                }
            }
        }
        deleteStore.commitChanges();
        var deleteStoreByUser = main.getDeleteStore(userGlobalIndex);
        // deleteForm ------------------------------------------------------------------------------
        var deleteForm = new Ext.FormPanel ({
            title: 'Delete Selection Variant',
            layout: {
                pack: 'center'
            },
            border: '0',
            id: 'deleteForm',
            padding: 10,
            items: [{
                xtype: 'combobox',
                flex: 1,
                id: 'deleteSelectionVariantName',
                fieldLabel: 'Delete',
                inputId: 'deleteInput',
                store: deleteStoreByUser,
                displayField: 'description',
                width: 400,
                listeners: {
                    select: {
                        fn: function(){
                            //var me = this;
                            var taskStore = Ext.getStore('taskStore');
                            var deleteNameInput = deleteInput.value;
                            var deletedRecordIndex = selectionVariantStore.findExact('description',deleteNameInput);
                            if (deletedRecordIndex !== -1) {
                                var deletedRecord = selectionVariantStore.getAt(deletedRecordIndex);
                                var deletedRecordName = deleteNameInput;
                                var confirm = Ext.MessageBox.confirm(
                                    'Confirm',
                                    'Delete Variant: '&deletedRecordName,
                                    function (e){
                                        if (e === 'yes') {
                                            var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
                                            var taskStore = Ext.getStore('taskStore');
                                            var deleteNameInput = deleteInput.value;
                                            var deleteType;
                                            var deleteForm = Ext.ComponentManager.get('deleteForm');
                                            deleteNameInput = selectionVariantStore.findExact('description',deleteNameInput);
                                            deleteType = selectionVariantStore.getAt(deleteNameInput).get('type');
                                            deleteNameInput = selectionVariantStore.getAt(deleteNameInput).get('name');
                                            var deletedRecordType = 'deleteVariant';
                                            selectionVariantStore.remove(deletedRecord);
                                            selectionVariantStore.sync();
                                            var batch = {};
                                            batch.proxy = taskStore.getProxy();
                                            batch.proxy.extraParams = {};
                                            batch.proxy.setExtraParam('deleteName',deleteNameInput);
                                            batch.proxy.setExtraParam('deleteType',deleteType);
                                            taskStore.load({
                                                batch: batch,
                                                callback: function (){
                                                    Ext.MessageBox.alert(
                                                        'Deleted','Deleted Variant'
                                                    );
                                                }
                                            });
                                        } else {
                                            this.hide();
                                        }
                                    }
                                );
                            } else {
                                alert('Variant does not exist.');
                            }
                        }
                    }
                }
            }
            ]});
        /* var userGlobalIndex = GanttConfigStoreXml.findExact('name','saveGlobal');
         if (userGlobalIndex == -1){
         var deleteFormCmp = Ext.ComponentManager.get('deleteForm');
         if(deleteFormCmp !== undefined){
         deleteFormCmp.hide();
         }
         } else {
         var userGlobalRecord = GanttConfigStoreXml.getAt(userGlobalIndex);
         var userGlobalValue = userGlobalRecord.get('value');
         if (userGlobalValue != 'X') {
         var deleteFormCmp = Ext.ComponentManager.get('deleteForm');
         deleteFormCmp.hide();
         }
         } */
        //define input forms
        var networkForm = new Ext.FormPanel ({
            title: 'Network',
            header: false,
            items: [{
                xtype: 'networkcustomtrigger',
                fieldLabel: 'Network',
                id: 'networkForm',
                inputId: 'networkInput',
                emptyText: 'Network Search'
            }]
        });
        var materialForm = new Ext.FormPanel ({
            title: 'Material',
            header: false,
            items: [{
                xtype: 'materialcustomtrigger',
                fieldLabel: 'Material',
                inputId: 'materialInput',
                id: 'materialForm',
                name: 'Material',
                emptyText: 'Material Search'
            }]
        });
        var plantForm = new Ext.FormPanel ({
            title: 'Plant',
            header: false,
            items: [{
                xtype: 'plantcustomtrigger',
                fieldLabel: 'Plant',
                inputId: 'plantInput',
                id: 'plantForm',
                name: 'plant',
                emptyText: 'Plant Search'
            }]
        });
        var programForm = new Ext.FormPanel ({
            title: 'Program',
            header: false,
            items: [{
                xtype: 'programcustomtrigger',
                fieldLabel: 'Program',
                inputId: 'programInput',
                id: 'programForm',
                name: 'program',
                emptyText: 'Program Search'
            }]
        });
        var effectivityForm = new Ext.FormPanel ({
            title: 'Effectivity',
            header: false,
            items: [{
                xtype: 'effectivitycustomtrigger',
                fieldLabel: 'Effectivity',
                id: 'effectivityForm',
                inputId: 'effectivityInput',
                name: 'effectivity',
                emptyText: 'Effectivity Search'
            }]
        });
        var primaryMissionForm = new Ext.FormPanel ({
            title: 'Primary Mission',
            header: false,
            items: [{
                xtype: 'primarymissioncustomtrigger',
                fieldLabel: 'Primary Mission',
                inputId: 'primaryMissionInput',
                id: 'primaryMissionForm',
                name: 'primaryMission',
                emptyText: 'Primary Mission Search'
            }]
        });
        var buildItemForm = new Ext.FormPanel ({
            title: 'Build Item',
            header: false,
            items: [{
                xtype: 'builditemcustomtrigger',
                fieldLabel: 'Build Item',
                inputId: 'buildItemInput',
                id: 'buildItemForm',
                name: 'buildItem',
                emptyText: 'Build Item Search'
            }]
        });
        var tailNumberForm = new Ext.FormPanel ({
            title: 'Tail Number',
            header: false,
            items: [{
                xtype: 'tailnumbercustomtrigger',
                fieldLabel: 'Tail Number',
                id: 'tailNumberForm',
                inputId: 'tailNumberInput',
                name: 'tailNumber',
                emptyText: 'Tail Number Search'
            }]
        });
        var nameForm = new Ext.FormPanel ({
            title: 'Name',
            header: false,
            items: [{
                xtype: 'namecustomtrigger',
                fieldLabel: 'Name',
                inputId: 'nameInput',
                id: 'nameForm',
                name: 'name',
                emptyText: 'Name Search'
            }]
        });
        var notesForm = new Ext.FormPanel ({
            title: 'Notes',
            header: false,
            items: [{
                xtype: 'notescustomtrigger',
                fieldLabel: 'Notes',
                inputId: 'notesInput',
                id: 'notesForm',
                name: 'notes',
                emptyText: 'Notes Search'
            }
            ]
        });

        // define toolbar

        // selection Tab Panel ------------------------------------------------------------------------------
        var selectionTabPanel = new Ext.tab.Panel ({
            activeTab:1,
            region: 'center',
            collapsible: false,
            layout: 'fit',
            rootVisible: false,
            height: 500,
            defaults: {
                Padding: 10
            },
            items: [{
                title: '',
                icon: 'images/save.jpg',
                titleCollapse: true,
                items:
                    [saveForm,submitButton,deleteForm]
            },{

                title: '',
                icon: 'images/execute.png',
                titleCollapse: true,
                items: [summaryOptionsForm]
            },{
                title: 'Program',
                titleCollapse: true,
                items: [programForm, programGrid]
            },{
                title: 'Tail Number',
                titleCollapse: true,
                items: [tailNumberForm, tailNumberGrid]
            },{
                title: 'Primary Mission',
                titleCollapse: true,
                items: [primaryMissionForm, primaryMissionGrid]
            },{
                title: 'Network',
                titleCollapse: true,
                items: [networkForm, networkGrid]
            },{
                title: 'Material',
                titleCollapse: true,
                items: [materialForm, materialGrid]
            },{
                title: 'Effectivity',
                titleCollapse: true,
                items: [effectivityForm, effectivityGrid]
            },{
                title: 'Plant',
                titleCollapse: true,
                items: [plantForm, plantGrid]
            },{
                title: 'Build Item',
                titleCollapse: true,
                items: [buildItemForm, buildItemGrid]
            },{
                title: 'Other Options',
                titleCollapse: true,
                items: [nameForm,notesForm]
            }
            ]
        });

        // Main selection Window Panel ------------------------------------------------------------------------------
        window.appState.selectionWindow = Ext.create('Ext.window.Window', {
                title: 'Selection Criteria',
                height: 500,
                width: 800,
                id: 'selectionWindow',
                itemId: 'selectionWindow',
                constrain: true,
                layout:'border',
                defaults: {
                    collapsible: true,
                    bodyStyle: 'padding:15px'
                },
                items: [selectionTree, selectionTabPanel]
            });

        window.appState.selectionWindow.show();
    },

    onShowBaselineAfterRender: function(component, eOpts) {

    },

    onComboboxSelect1: function(combo, records, eOpts) {
        var me = this;
        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');
        var versionStore = Ext.getStore('VersionStoreXml');
        var versionInput = versionValue.value;
        var versionIndex = versionStore.findExact('description',versionInput);
        var versionRecord = versionStore.getAt(versionIndex);
        var versionName = versionRecord.get('version');
        var check = passedConfigStore.findExact('type','version');
        if (check != '-1') {
            var remove = passedConfigStore.findExact('type','version');
            passedConfigStore.removeAt(remove);
            passedConfigStore.add({
                type: 'version',
                value: versionName
            });
        } else {
            passedConfigStore.add({
                type: 'version',
                value: versionName
            });
        }
    },

    onComboboxAfterRender: function(component, eOpts) {
        var me = this;
        var versionStore = Ext.getStore('VersionStoreXml');
        var versionInit = versionStore.findExact('selected','true');
        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');
        if (versionInit !== -1) {
            var versionIndex = versionInit;
            versionInit = versionStore.getAt(versionInit).get('description');
            var versionName = versionStore.getAt(versionIndex).get('version');
        } else {
            verionInit = '';
            var versionName = '';
        }
        passedConfigStore.add({
            type: 'version',
            value: versionName
        });
        component.setValue(versionInit);
    },

    onColumn_variantSelect: function(combo, records, eOpts) {
        var me = this;
        var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');
        var columnVariantStore = Ext.getStore('ColumnStoreXml');
        var columnVariantInput = columnVariantValue.value;
        var columnVariantIndex = columnVariantStore.findExact('description',columnVariantInput);
        var columnVariantRecord = columnVariantStore.getAt(columnVariantIndex);
        var columnVariantName = columnVariantRecord.get('name');
        var checkObjectsStore = passedObjectsStore.findExact('type','columnVariant');
        var checkConfigStore = passedConfigStore.findExact('type','columnVariant');
        var check = passedObjectsStore.findExact('type','columnVariant');
        var noPrompt = ganttConfigStore.findExact('name','noPrompt');

        if (checkObjectsStore != -1) {
            var remove = passedObjectsStore.findExact('type','columnVariant');
            passedObjectsStore.removeAt(remove);
            passedObjectsStore.add({
                type: 'columnVariant',
                number: columnVariantName
            });
        } else {
            passedObjectsStore.add({
                type: 'columnVariant',
                number: columnVariantName
            });
        }
        if (checkConfigStore != -1) {
            var remove = passedConfigStore.findExact('type','columnVariant');
            passedConfigStore.removeAt(remove);
            passedConfigStore.add({
                type: 'columnVariant',
                value: columnVariantName
            });
        } else {
            passedConfigStore.add({
                type: 'columnVariant',
                value: columnVariantName
            });
        }
        var batch = {};
        batch.proxy = ganttConfigStore.getProxy();
        batch.proxy.extraParams = {};
        batch.proxy.setExtraParam('columnVariant',columnVariantName);
        ganttPanel.setLoading(true);
        ganttConfigStore.load({
            batch: batch,
            callback: function() {
                if (noPrompt != -1) {
                    ganttConfigStore.add({
                        name: 'noPrompt',
                        value :''
                    });
                }
                if (!me.eventTrigger){
                    // lazy instantiation of event trigger object
                    me.eventTrigger = Ext.create('widget.eventtrigger');
                }
                me.eventTrigger.fireEvent('ganttConfig');//doFireEvent
                ganttPanel.setLoading(false);
            }
        });







    },

    onColumn_variantAfterRender: function(component, eOpts) {
        var me = this;
        var columnStore = Ext.getStore('ColumnStoreXml');
        var columnInit = columnStore.findExact('selected','X');
        var name = '';
        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');
        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
        if (columnInit !== -1) {
            columnInit = columnStore.getAt(columnInit).get('description');
        } else {
            columnInit = '';
        }
        component.setValue(columnInit);
        passedConfigStore.add({
            type: 'columnVariant',
            value: columnInit.toUpperCase()
        });
    },

    onSelection_variantSelect: function(combo, records, eOpts) {
        var me = this;
        var taskStore = Ext.getStore('taskStore');
        var ganttConfigStore = Ext.getStore('GanttConfigStoreXml');
        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
        var passedConfigStore = Ext.getStore('PassedConfigStoreXml');
        var selectionVariantStore = Ext.getStore('SelectionVariantStoreXml');
        var SelectedObjectStoreXml = Ext.getStore('SelectedObjectStoreXml');
        var paramStore = Ext.getStore('ParamStoreXml');
        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
        var selectedVariantRecord = selectionVariantStore.findExact('description',selectionVariantValue.value);
        var selectedVariantName = selectionVariantStore.getAt(selectedVariantRecord).get('name');
        var selectedVariantType = selectionVariantStore.getAt(selectedVariantRecord).get('type');
        var check = passedConfigStore.findExact('type','selectionVariant');
        var ganttPanel = Ext.ComponentManager.get('ganttPanel');
        //add noPrompt
        ganttConfigStore.add({
            name: 'noPrompt',
            value: ''
        });
        if (check != '-1') {
            var remove = passedConfigStore.findExact('type','selectionVariant');
            passedConfigStore.removeAt(remove);
            passedConfigStore.add({
                type: 'selectionVariant',
                value: selectedVariantName
            });
        } else {
            passedConfigStore.add({
                type: 'selectionVariant',
                value: selectedVariantName
            });
        }
        var batch = {};
        batch.proxy = paramStore.getProxy();
        batch.proxy.extraParams = {};
        batch.proxy.setExtraParam('selectionVariant', selectedVariantName);
        batch.proxy.setExtraParam('selectionVariantType', selectedVariantType);
        passedObjectsStore.removeAll();
        paramStore.removeAll();
        paramStore.load ({
            batch: batch,
            callback: function () {
                var networkParentNode = SelectedObjectStoreXml.getNodeById("networkParentNode");
                var materialParentNode = SelectedObjectStoreXml.getNodeById("materialParentNode");
                var effectivityParentNode = SelectedObjectStoreXml.getNodeById("effectivityParentNode");
                var programParentNode = SelectedObjectStoreXml.getNodeById("programParentNode");
                var primaryMissionParentNode = SelectedObjectStoreXml.getNodeById("primaryMissionParentNode");
                var tailNumberParentNode = SelectedObjectStoreXml.getNodeById("tailNumberParentNode");
                var buildItemParentNode = SelectedObjectStoreXml.getNodeById("buildItemParentNode");
                var nameParentNode = SelectedObjectStoreXml.getNodeById("nameParentNode");
                var notesParentNode = SelectedObjectStoreXml.getNodeById("notesParentNode");
                networkParentNode.removeAll();
                materialParentNode.removeAll();
                effectivityParentNode.removeAll();
                programParentNode.removeAll();
                primaryMissionParentNode.removeAll();
                buildItemParentNode.removeAll();
                notesParentNode.removeAll();
                nameParentNode.removeAll();
                tailNumberParentNode.removeAll();
                paramStore.each(
                    function (record) {
                        var name = record.get('name');
                        var value = record.get('value');
                        var selectedStore = Ext.getStore('SelectedObjectStoreXml');
                        var passedObjectsStore = Ext.getStore('PassedObjectsStoreXml');
                        var paramStore = Ext.getStore('ParamStoreXml');
                        var networkParentNode = SelectedObjectStoreXml.getNodeById("networkParentNode");
                        var materialParentNode = SelectedObjectStoreXml.getNodeById("materialParentNode");
                        var effectivityParentNode = SelectedObjectStoreXml.getNodeById("effectivityParentNode");
                        var programParentNode = SelectedObjectStoreXml.getNodeById("programParentNode");
                        var primaryMissionParentNode = SelectedObjectStoreXml.getNodeById("primaryMissionParentNode");
                        var tailNumberParentNode = SelectedObjectStoreXml.getNodeById("tailNumberParentNode");
                        var buildItemParentNode = SelectedObjectStoreXml.getNodeById("buildItemParentNode");
                        var nameParentNode = SelectedObjectStoreXml.getNodeById("nameParentNode");
                        var notesParentNode = SelectedObjectStoreXml.getNodeById("notesParentNode");
                        switch (name) {
                            case 'network' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var networkChildNode = networkParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'material' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var materialChildNode = materialParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'effectivity' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var effectivityChildNode = effectivityParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'program' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var programChildNode = programParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'primaryMission' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var primaryMissionChildNode = primaryMissionParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'buildItem' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var buildItemChildNode = buildItemParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'tailNumber' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var tailNumberChildNode = tailNumberParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'name' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var nameChildNode = nameParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'notes' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                var notesChildNode = notesParentNode.appendChild({
                                    type: name,
                                    number: value,
                                    leaf: true
                                });
                                break;
                            case 'majorShippedEndItemsOptions' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                            case 'missionOptions' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                            case 'productionEndItemsOptions' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                            case 'sortBy' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                            case 'baselineOptions' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                            case 'showDetails' :
                                passedObjectsStore.add(
                                    {type: name, number: value}
                                );
                                paramStore.add(
                                    {name: name, value: value}
                                );
                                break;
                        }
                    }
                );
            }
        });
    },

    onSelection_variantAfterRender: function(component, eOpts) {
        var me = this;
        var selectionStore = Ext.getStore('SelectionVariantStoreXml');
        try {
            selectionStore.add({
                name: '',
                selected: '',
                description: '',
                type: ''
            });
        } catch (err) {
            console.log(err);
        }

    },

    onComboboxSelect: function(combo, records, eOpts) {
        var main = MyApp.app.getController('Main');
        var store = Ext.getStore('InternalStore');
        var check = store.findExact('name','ganttViewChanged');
        if (check == -1) {
            store.add({
                name: 'ganttViewChanged'
            });
        } else {
            store.getAt(check).set({
                name: 'ganttViewChanged'
            });
        }
        var record = 'length' in records ? records[0] : records;
        main.changeGanttView(record.get('name'));

    }

});